---
title: "OnsemiFootprint"
format: html
---

```{python, python.reticulate = FALSE}
import pandas as pd
import numpy as np
import plotly.express as px
import pycountry

east = pd.read_csv('https://raw.githubusercontent.com/bridg3r/myclasses/main/datasets/Onsmei_Footprint_East.csv')
west = pd.read_csv('https://raw.githubusercontent.com/bridg3r/myclasses/main/datasets/Onsmei_Footprint_West.csv')
asia = pd.read_csv('https://raw.githubusercontent.com/bridg3r/myclasses/main/datasets/Onsemi_Footprint_Asia.csv')
cities = pd.read_csv('https://raw.githubusercontent.com/datasets/world-cities/master/data/world-cities.csv')
```


```{python}
world_cities = cities.name.to_list()
world_countries = []
for country in pycountry.countries:
  world_countries.append(country.name)

world_countries.append('Vietnam')

world_cities = cities.name.to_list()

fabs = ['Aizu', 'Bucheon', 'Gresham', 'Mountain Top', 'Pocatello', 'Nampa', 'ISMF Seremban', 'Rožnov']
ATO = ['Carmona', 'Cebu', 'Tarlac', 'Leshan', 'Shenzhen', 'Suzhou', 'Seremban', 'Burlington', 'OSV', 'Bình Dương']

all_cities = fabs + ATO
all_cities = all_cities + (world_cities)

def find_locations(region, us=0):

  region = region.drop_duplicates(subset = ['Address']).dropna(subset= ['Address'])

  country = []
  for i in range(len(region.Address)):
    if us == 1: 
      country.append('United States')
      region['city']=region.Address.str.split(',', expand = True).iloc[:,-3].str.strip()
      region['country'] = 'United States'
      return region
    country.append(np.NaN)

  index = 0
  for i in region.Address:
    for j in world_countries:
      if i.find(j) != -1:
        country[index] = j
        break
    index+=1

  region['country'] = country

  city = []
  for i in range(len(region.Address)):
   city.append(np.NaN)

  index = 0
  for i in region.Address:
    for j in all_cities:
      if i.find(j) != -1:
        city[index] = j
        break
    index+=1

  region['city'] = city

  return region

west = find_locations(west, 1)
east = find_locations(east)
asia = find_locations(asia)

dat = west.append([east, asia]).reset_index()

dat = dat.assign(
    site_type = lambda x: 
    np.where(
        x.city.isin(fabs),
        'Wafer Fab Site',
          np.where(
            x.city.isin(ATO),
            'ATO',
            'other'
          )
    )
)

dat = dat.assign(
    cgroup = lambda x: 
    np.where(
        x.city.isin(all_cities),
        'ASG',
        'non-ASG'
    )
)
dat.to_csv('/Users/bridg3r/Documents/GitHub/Onsemi/streamlitTest/onsemi')
```


```{r}
library(shiny)
library(tidyverse)
library(plotly)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(htmlwidgets)

#fix the cities
onsemi <- read_csv('/Users/bridg3r/Documents/GitHub/Onsemi/streamlitTest/onsemi')

world <- ne_countries(scale = "medium", returnclass = "sf")

junior <- ggplot(data = world) +
  geom_sf(color = "black", fill = rgb(144, 238, 144, maxColorValue = 255)) +
  labs(shape="Group", color = "Site Function") +
  theme(panel.background = element_rect(fill = rgb(137, 207, 240, maxColorValue = 255)),
        panel.grid.major = element_line(linetype = 'dashed', size = .3),
        plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(), axis.title.y=element_blank(), 
        legend.position = "none") + 
  scale_color_manual(values = c(rgb(255, 172, 28, maxColorValue = 255), rgb(238, 75, 43, maxColorValue = 255), 
                                rgb(34, 139, 34, maxColorValue = 255))) + 
  geom_point(data = onsemi, aes(Longitude, Latitude, color = site_type, shape=cgroup, 
              text = paste0(city, ', ', country, '\n', site_type, '\n', cgroup)), fill = 'black', size = 3)


ui <- fluidPage(
  titlePanel(imageOutput("logo", height = '50px')),
  fluidRow(
    column(9,
           plotOutput("plot", width = "900px", height = '450px')
    ), 
    column(2,
           selectInput("city", label = "Locations", selected = 'All', choices = append(c('All'), sort(onsemi$city))),
           imageOutput("legend")
    )
  )
)


server <- function(input, output, session) {
  output$plot <- renderPlot(
    if (input$city != 'All') {
      junior + geom_label(aes(Longitude, Latitude, label = city), data = onsemi %>% filter(city==input$city))
    } else {
      junior
    }
    
  )
  
  output$legend <- renderImage({
    list(
      src = file.path("./legend.png"),
      contentType = "image/png",
      width = 130,
      height = 200
    )
  }, deleteFile = FALSE)
  
  output$logo <- renderImage({
    list(
      src = file.path("./worldwidelogo.png"),
      contentType = "image/png",
      width = 500,
      height = 50
    )
  }, deleteFile = FALSE)
  
  output$title <- renderText("Worldwide Footprint")
  
}


shinyApp(ui, server)

```