library(geofacet)
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2') +
geom_line()
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2', scales='free') +
geom_line()
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2') +
geom_line()
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid1') +
geom_line()
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2') +
geom_line()
ggplot(california) +
geom_col(aes(x = StateAbbr, y = ), fill = "dark green") +
labs(title = "Single Family Permits in each state", x = "State", y = "Permit Value")
ggplot(california) +
geom_col(aes(x = StateAbbr, y = yes), fill = "dark green") +
labs(title = "Single Family Permits in each state", x = "State", y = "Permit Value")
california
USPermits %>% group_by(year) %>% summarise(count = n()) %>%
ggplot(aes(x='year', y='Total Single Family Building Permits')) +
geom_line() +
#  labs()
USPermits %>% group_by(year) %>% summarise(count = n()) %>%
ggplot(aes(x='year', y='Total Single Family Building Permits')) +
geom_line()
#  labs()
USPermits %>% group_by(year) %>% summarise(count = n()) %>%
ggplot(aes(x=year, y=count)) +
geom_line() +
labs('year', y='Total Single Family Building Permits')
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_ny_counties_grid1') +
geom_line()
california
california %>% group_by(countyname) %>% summarise(count = n()) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7))
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ny_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -7))
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_to_lower(str_sub(countyname, 1, -7))) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid2') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x= year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8))
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = n()) %>%
mutate(countyname = str_sub(countyname, 1, -8))
california
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
# create FIPS columns in all datasets
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits <- CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
temp <- usSpacial %>% select(-geometry)
california<-left_join(CaliPermits, caliSpacial, by = 'FIPS')
USA <- USPermits %>% group_by(StateAbbr, year, statefp) %>% summarise(count = sum(value) %>%
left_join(temp, by = 'statefp')
# create FIPS columns in all datasets
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits <- CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
temp <- usSpacial %>% select(-geometry)
california<-left_join(CaliPermits, caliSpacial, by = 'FIPS')
USA <- USPermits %>% group_by(StateAbbr, year, statefp) %>% summarise(count = sum(value)) %>%
left_join(temp, by = 'statefp')
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y= count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
USPermits
USPermits %>% group_by(year) %>% summarise(count = sum(value)) %>%
ggplot(aes(x=year, y=count)) +
geom_line() +
labs('year', y='Total Single Family Building Permits')
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -7))
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -9))
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>% table(.$countyname)
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>% table(.$countyname)
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
grat<- california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
table(grat$countyname)
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_geo(~countyname, grid = 'us_ca_counties_grid1') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
fact_wrap(~countyname) +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname) +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname, scales= 'free') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname) +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname) +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8))
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname) +
geom_line()
#reads in all of our data
library(tidyverse)
library(USAboundaries)
usSpacial <- us_states()
caliSpacial <- us_counties(states = "CA") %>% select(-state_name)
#devtools::install_github("hathawayj/buildings")
#install.packages('geofacet')
library(buildings)
library(geofacet)
CaliPermits <- permits %>% filter(variable == 'Single Family', StateAbbr == 'CA')
USPermits <- permits %>% filter(variable == 'Single Family')
# create FIPS columns in all datasets
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits <- CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
temp <- usSpacial %>% select(-geometry)
california<-left_join(CaliPermits, caliSpacial, by = 'FIPS')
CaliPermits
caliSpacial
us_counties(states = "CA")
us_counties(states = "CA")
#reads in all of our data
library(tidyverse)
library(USAboundaries)
usSpacial <- us_states()
caliSpacial <- us_counties(states = "CA") %>% select(-state_name)
#devtools::install_github("hathawayj/buildings")
#install.packages('geofacet')
library(buildings)
library(geofacet)
us_counties(states = "CA")
library(tidyverse)
library(sf)
library(USAboundaries)
library(ggrepel)
us_counties(states = "ID")
library(sf)
library(sf)
library(sf)
library(sf)
library(USAboundaries)
library(USAboundaries)
library(tidyverse)
library(sf)
library(tidyverse)
library(sf)
library(USAboundaries)
library(ggrepel)
# The counties of Idaho
id <- us_counties(states = "ID")
## Gets the geometry for all the contiguous 48 states ##
state_shape <- us_states() %>%
filter(jurisdiction_type == "state",
state_abbr != "AK",
state_abbr != "HI")
city_shape <- us_cities() %>% filter(population>200000, state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>%  slice_tail(n=3)
city_shape <- us_cities() %>% filter(state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>% arrange(population, .by_group = TRUE) %>% slice_tail(n=3)
## Plots the two datasets ##
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw()
#trying to get the label
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw() +
geom_sf_label(data=city_shape, aes(label = city), stat = "sf_coordinates")
us_counties(states = "ID")
# The counties of Idaho
id <- us_counties(states = "ID")
## Gets the geometry for all the contiguous 48 states ##
state_shape <- us_states() %>%
filter(jurisdiction_type == "state",
state_abbr != "AK",
state_abbr != "HI")
city_shape <- us_cities() %>% filter(population>200000, state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>%  slice_tail(n=3)
city_shape <- us_cities() %>% filter(state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>% arrange(population, .by_group = TRUE) %>% slice_tail(n=3)
## Plots the two datasets ##
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw()
#trying to get the label
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw() +
geom_sf_label(data=city_shape, aes(label = city), stat = "sf_coordinates")
# The counties of Idaho
id <- us_counties(states = "ID")
## Gets the geometry for all the contiguous 48 states ##
state_shape <- us_states() %>%
filter(jurisdiction_type == "state",
state_abbr != "AK",
state_abbr != "HI")
city_shape <- us_cities() %>% filter(population>200000, state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>%  slice_tail(n=3)
city_shape <- us_cities() %>% filter(state_abbr != "AK",
state_abbr != "HI") %>% group_by(state_abbr)  %>% arrange(population, .by_group = TRUE) %>% slice_tail(n=3)
## Plots the two datasets ##
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw()
#trying to get the label
ggplot() +
geom_sf(data = state_shape, fill = NA) +
geom_sf(data = id, fill = NA) +
geom_sf(data = city_shape, aes(size = population/1000), colour = "dark blue") + theme_bw() +
geom_sf_label(data=city_shape, aes(label = city), stat = "sf_coordinates")
us_counties(states = "ID")
data.frame(us_counties(states = "CA"))
#reads in all of our data
library(tidyverse)
library(USAboundaries)
usSpacial <- us_states()
caliSpacial <- data.frame(us_counties(states = "CA")) %>% select(-state_name)
#devtools::install_github("hathawayj/buildings")
#install.packages('geofacet')
library(buildings)
library(geofacet)
CaliPermits <- permits %>% filter(variable == 'Single Family', StateAbbr == 'CA')
USPermits <- permits %>% filter(variable == 'Single Family')
# create FIPS columns in all datasets
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits <- CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
temp <- usSpacial %>% select(-geometry)
california<-left_join(CaliPermits, caliSpacial, by = 'FIPS')
caliSpacial
caliSpacial
caliSpacial
# create FIPS columns in all datasets
USPermits <- USPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
CaliPermits <- CaliPermits %>% mutate(countyfp = str_pad(as.character(county), 3, side = "left", pad = "0"), statefp = str_pad(as.character(state), 2, side = "left", pad = "0"), FIPS = str_c(statefp, countyfp))
temp <- usSpacial %>% select(-geometry)
california<-left_join(CaliPermits, caliSpacial, by = 'countyfp')
USA <- USPermits %>% group_by(StateAbbr, year, statefp) %>% summarise(count = sum(value)) %>%
left_join(temp, by = 'statefp')
ggplot(USA, aes(x= year, y= count)) +
facet_geo(~state_name, grid = 'us_state_grid2') +
geom_line()
california %>% group_by(countyname, year) %>% summarise(count = sum(value)) %>%
mutate(countyname = str_sub(countyname, 1, -8)) %>%
ggplot(aes(x=year, y=count)) +
facet_wrap(~countyname) +
geom_line()
library(shiny); runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(tags$script(src="clickhandler.js"))
) )
library(shiny)
library(plotly)
x = c(1, 2, 3)
y = c(4, 2, 4)
links = c("https://plot.ly/r/",
"https://plot.ly/r/shiny-tutorial",
"https://plot.ly/r/click-events")
df = data.frame(x, y, links)
shinyServer <- function(input, output) {
output$trendPlot <- renderPlotly({
# Create a ggplot
g = ggplot(data=df, aes(x = x, y = y)) + geom_point()
# Serialize as Plotly's graph universal format
p = plotly_build(g)
# Add a new key, links, that JS will access on click events
p$data[[1]]$links = links
p
# Alternatively, use Plotly's native syntax. More here: https://plot.ly/r
# plot_ly(df, x=x,y=y,links=links)
})
}
shinyApp(shinyUI, shinyServer)
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(HTML("<script type='text/javascript'>
$(document).ready(function(){
// boiler plate postMessage plotly code (https://github.com/plotly/postMessage-API)
var plot = document.getElementById('trendPlot').contentWindow;
pinger = setInterval(function(){
plot.postMessage({task: 'ping'}, 'https://plot.ly')
}, 100);
var clickResponse = function(e) {
plot = document.getElementById('trendPlot').contentWindow;
var message = e.data;
console.log( 'New message from chart', message );
if(message.pong) {
// tell the embedded plot that you want to listen to click events
clearInterval(pinger);
plot.postMessage({
task: 'listen', events: ['click']}, 'https://plot.ly');
plot.postMessage({
task: 'relayout',
'update': {hovermode: 'closest'},
},
'https://plot.ly');
}
else if(message.type === 'click') {
var curveNumber = message['points'][0]['curveNumber'],
pointNumber = message['points'][0]['pointNumber'];
var link;
var traces = message.points[0].data;
if(traces !== null && typeof traces === 'object') {
link = traces.links[pointNumber];
} else {
link = traces[curveNumber].links[pointNumber];
}
console.log(link);
var win = window.open(link, '_blank');
win.focus();
}
};
window.addEventListener("message", clickResponse, false);
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(includeScript("./www/clickhandler.js"))
) )
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(includeScript("~/Documents/GitHub/Onsemi/OnsemiFootprint/www/clickhandler.js"))
) )
library(shiny)
library(plotly)
x = c(1, 2, 3)
y = c(4, 2, 4)
links = c("https://plot.ly/r/",
"https://plot.ly/r/shiny-tutorial",
"https://plot.ly/r/click-events")
df = data.frame(x, y, links)
shinyServer <- function(input, output) {
output$trendPlot <- renderPlotly({
# Create a ggplot
g = ggplot(data=df, aes(x = x, y = y)) + geom_point()
# Serialize as Plotly's graph universal format
p = plotly_build(g)
# Add a new key, links, that JS will access on click events
p$data[[1]]$links = links
p
# Alternatively, use Plotly's native syntax. More here: https://plot.ly/r
# plot_ly(df, x=x,y=y,links=links)
})
}
shinyApp(shinyUI, shinyServer)
df
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(includeScript("~/Documents/GitHub/Onsemi/OnsemiFootprint/www/clickhandler.js"))
) )
library(shiny)
library(plotly)
x = c(1, 2, 3)
y = c(4, 2, 4)
links = c("https://plot.ly/r/",
"https://plot.ly/r/shiny-tutorial",
"https://plot.ly/r/click-events")
df = data.frame(x, y, links)
shinyServer <- function(input, output) {
output$trendPlot <- renderPlotly({
# Create a ggplot
plot_ly(df, x=x,y=y,links=links)
# Alternatively, use Plotly's native syntax. More here: https://plot.ly/r
# plot_ly(df, x=x,y=y,links=links)
})
}
shinyApp(shinyUI, shinyServer)
library(shiny)
library(plotly)
shinyUI <- fluidPage(
mainPanel(
plotlyOutput("trendPlot"),
tags$head(tags$script(src="~/Documents/GitHub/Onsemi/OnsemiFootprint/www/clickhandler.js"))
) )
library(shiny)
library(plotly)
x = c(1, 2, 3)
y = c(4, 2, 4)
links = c("https://plot.ly/r/",
"https://plot.ly/r/shiny-tutorial",
"https://plot.ly/r/click-events")
df = data.frame(x, y, links)
shinyServer <- function(input, output) {
output$trendPlot <- renderPlotly({
# Create a ggplot
plot_ly(df, x=x,y=y,links=links)
# Alternatively, use Plotly's native syntax. More here: https://plot.ly/r
# plot_ly(df, x=x,y=y,links=links)
})
}
shinyApp(shinyUI, shinyServer)
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
runApp('Documents/GitHub/Onsemi/OnsemiFootprint/footprintapp.R')
